#include <iostream>
#include <stack>
#include <string>

using namespace std;

// Function to check if the brackets match
bool isMatchingPair(char open, char close) {
    return (open == '(' && close == ')') ||
           (open == '{' && close == '}') ||
           (open == '[' && close == ']');
}

// Function to check if the expression is well-parenthesized
bool isWellParenthesized(const string& expression) {
    stack<char> s;

    for (char ch : expression) {
        if (ch == '(' || ch == '{' || ch == '[') {
            // Push opening brackets onto the stack
            s.push(ch);
        } else if (ch == ')' || ch == '}' || ch == ']') {
            // If the stack is empty or brackets don't match, it's unbalanced
            if (s.empty() || !isMatchingPair(s.top(), ch)) {
                return false;
            }
            // Pop the matching opening bracket from the stack
            s.pop();
        }
    }

    // If the stack is empty, the expression is well-parenthesized
    return s.empty();
}

int main() {
    string expression;

    cout << "Enter an expression: ";
    getline(cin, expression);

    if (isWellParenthesized(expression)) {
        cout << "The expression is well parenthesized." << endl;
    } else {
        cout << "The expression is not well parenthesized." << endl;
    }

    return 0;
}

